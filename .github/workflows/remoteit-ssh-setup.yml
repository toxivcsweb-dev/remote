name: Remote.it SSH Setup (with hardcoded creds placeholder)

on:
  workflow_dispatch:

jobs:
  setup-remoteit-ssh:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    env:
      # Replace these placeholders with your actual remote.it credentials if you really want to hardcode.
      # Strongly recommended: use GitHub Secrets instead of hardcoding.
      REMOTEIT_EMAIL: "toxicvpsweb@gmail.com"       # Yahan apna remote.it email daalein
      REMOTEIT_PASSWORD: "eT83FjV4cWaKD!5"  
      ROOT_PASS: "Root@12345"

    steps:
      - name: Checkout (optional)
        uses: actions/checkout@v4

      - name: Prepare Ubuntu & OpenSSH (set root password)
        run: |
          set -eux
          sudo apt-get update -y
          sudo apt-get install -y openssh-server curl ca-certificates file
          sudo mkdir -p /var/run/sshd

          # set root password (change ROOT_PASS env if needed)
          echo "root:${ROOT_PASS}" | sudo chpasswd

          # Allow root login and password auth (you can tighten later)
          sudo sed -i 's/^#PermitRootLogin .*/PermitRootLogin yes/' /etc/ssh/sshd_config || true
          sudo sed -i 's/^PermitRootLogin .*/PermitRootLogin yes/' /etc/ssh/sshd_config || true
          sudo sed -i 's/^#PasswordAuthentication .*/PasswordAuthentication yes/' /etc/ssh/sshd_config || true
          sudo sed -i 's/^PasswordAuthentication .*/PasswordAuthentication yes/' /etc/ssh/sshd_config || true

          sudo systemctl restart ssh || sudo service ssh restart || true
          echo "SSH ready: user=root password=${ROOT_PASS}"

      - name: Download remote.it CLI (tarball) - attempt
        run: |
          set -eux
          URL="https://downloads.remote.it/remoteit-cli/remoteit-cli-linux-amd64.tar.gz"
          OUT="remoteit-cli-linux-amd64.tar.gz"
          echo "Downloading: $URL"
          if curl -fsSL "$URL" -o "$OUT"; then
            echo "Downloaded $OUT ($(stat -c%s "$OUT")) bytes"
            file "$OUT" || true
            if tar -tzf "$OUT" > /dev/null 2>&1; then
              mkdir -p remoteit-cli
              tar -xzf "$OUT" -C remoteit-cli
              if [ -x remoteit-cli/remoteit ]; then
                sudo mv -f remoteit-cli/remoteit /usr/local/bin/remoteit
                sudo chmod +x /usr/local/bin/remoteit
                echo "remoteit CLI installed to /usr/local/bin/remoteit"
              else
                echo "Tarball extracted but remoteit binary not found. Listing remoteit-cli:"
                ls -la remoteit-cli || true
              fi
            else
              echo "Downloaded file is not a gzip tarball (likely HTML or redirect). Showing head for debug:"
              head -n 80 "$OUT" || true
            fi
          else
            echo "curl failed to download tarball (network/URL issue)."
          fi

      - name: Fallback installer (connectd) if CLI not present
        run: |
          set -eux
          if ! command -v remoteit >/dev/null 2>&1; then
            INST_URL="https://raw.githubusercontent.com/remoteit/install/master/install.sh"
            echo "Attempting fallback installer from $INST_URL"
            if curl -fsSL "$INST_URL" -o /tmp/remoteit-install.sh; then
              chmod +x /tmp/remoteit-install.sh
              # run best-effort; installer behavior may vary
              sudo /tmp/remoteit-install.sh --install-only || true
              if command -v connectd >/dev/null 2>&1 || command -v remoteit >/dev/null 2>&1; then
                echo "Fallback installer completed and remote.it binary found."
              else
                echo "Fallback installer finished but no remote.it binary detected."
              fi
            else
              echo "Could not download fallback installer script (curl failed)."
            fi
          else
            echo "remoteit CLI already installed; skipping fallback."
          fi

      - name: Show remote.it / connectd presence
        run: |
          if command -v remoteit >/dev/null 2>&1; then
            echo "remoteit CLI found at: $(which remoteit)"
            remoteit --version || true
          else
            echo "remoteit CLI not found."
          fi
          if command -v connectd >/dev/null 2>&1; then
            echo "connectd found at: $(which connectd)"
            connectd -v || true
          else
            echo "connectd not found."
          fi

      - name: Attempt non-interactive remote.it login (if CLI exists)
        run: |
          set -eux
          if command -v remoteit >/dev/null 2>&1; then
            if [ -z "${REMOTEIT_EMAIL}" ] || [ -z "${REMOTEIT_PASSWORD}" ]; then
              echo "REMOTEIT_EMAIL or REMOTEIT_PASSWORD empty; skipping login."
            else
              remoteit logout || true
              # best-effort non-interactive login
              remoteit login -e "${REMOTEIT_EMAIL}" -p "${REMOTEIT_PASSWORD}" || echo "remoteit login attempted (may require manual steps)."
              echo "If login succeeded, use remoteit CLI or dashboard to register device and expose SSH."
            fi
          else
            echo "remoteit CLI not available; cannot attempt login."
          fi

      - name: Final instructions and SSH info
        run: |
          echo "=========================================="
          echo "âœ… SSH server is running on the runner"
          echo "User: root"
          echo "Password: ${ROOT_PASS}"
          echo ""
          echo "If remote.it CLI installed & logged in, register device and add SSH service (port 22):"
          echo "  remoteit register-device -n 'GitHub-Runner-Ubuntu-SSH'"
          echo "  remoteit add-service --device <DEVICE-ID> --name SSH --protocol tcp --port 22 --local-port 22 --public-port 0"
          echo "  remoteit listen --device <DEVICE-ID> --service SSH"
          echo ""
          echo "Or go to https://remote.it dashboard, find the device, add SSH service, then connect via remote.it."
          echo ""
          echo "Notes:"
          echo " - Runner is ephemeral; job will stop after timeout (~30 min or what you set)."
          echo " - Avoid hardcoding credentials in public repos."
          echo "=========================================="
